
# ScandiPWA - Progressive Web App for Magento
#
# Copyright © Scandiweb, Inc. All rights reserved.
# See LICENSE for license details.
#
# @license OSL-3.0 (Open Software License ("OSL") v. 3.0)
# @package scandipwa/quote-graphql
# @link https://github.com/scandipwa/quote-graphql
#
# Copyright © Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

type Query {
    getPaymentMethods(guestCartId: String): [PaymentMethod] @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\GetPaymentMethods")
    getOrderList: OrderList @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\OrderListResolver") @doc(description: "The Sales Order query returns information about a Sales order")
    getOrderById(id: Int!): Order @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\ExpandedOrderResolver") @doc(description: "The Sales Order query returns information about a Sales order")
    getBraintreeConfig: Braintree @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\BraintreeResolver")
    getCartDisplayConfig: CartDisplayConfig @doc(description: "Get cart display settings") @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\CartDisplayConfigResolver")
    getStores(search: String, country: String, productsInfo: [ProductInfoInput]): Stores @resolver(class: "ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\GetStores")
}

type Mutation {
    estimateShippingCosts(address: EstimateShippingCostsAddress!, guestCartId: String): [ShippingMethod] @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\EstimateShippingCosts")
    saveAddressInformation(addressInformation: SaveAddressInformation!, guestCartId: String): PaymentDetails @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\SaveAddressInformation")
    linkOrder(customer_email: String!): Boolean @resolver(class:"\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\LinkOrder")
}

input ProductOptionInput {
    extension_attributes: ExtensionsAttributeInput
    buy_request: String
}

input ExtensionsAttributeInput {
    configurable_item_options: [ConfigurableItemOptionsInput]
    customizable_options: [CustomizableOptionsInput]
    customizable_options_multi: [CustomizableOptionsInput]
    downloadable_product_links: [DownloadableProductLinksInput]
    bundle_options: [BundleOptionInput!]
    grouped_product_options: [CustomizableOptionsInput]
}

input ConfigurableItemOptionsInput {
    option_id: String
    option_value: Int
}

input CustomizableOptionsInput {
    option_id: String!
    option_value: String
    option_filename: String
}

input DownloadableProductLinksInput {
    link_id: Int
}

input AddressInput {
    method: String
    region: String
    region_id: Int
    region_code: String
    country_id: String
    postcode: String
    city: String
    firstname: String
    lastname: String
    email: String
    telephone: String
    company: String
    street: [String]
    vat_id: String
    extension_attributes: [AddressExtensionAttributes]
}

input EstimateShippingCostsAddress {
    region: String
    region_id: Int
    region_code: String
    country_id: String
    postcode: String
    city: String
    firstname: String
    lastname: String
    email: String
    telephone: String
    street: [String]
    customer_id: Int
    same_as_billing: Int
}

input SaveAddressInformation {
    shipping_address: AddressInput!
    billing_address: AddressInput!
    shipping_carrier_code: String
    shipping_method_code: String
}

type Braintree {
    is_three_d_secure: Boolean
}

type PaymentTotals implements TotalsObject {
}

type PaymentDetails {
    payment_methods: [PaymentMethod]
    totals: PaymentTotals
}

type PaymentMethod {
    code: String
    title: String
}

interface TotalsObject @typeResolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\TotalsObject") {
    shipping_address: OrderCustomerAddress
    applied_rule_ids: String
    items_count: Int
    customer_is_guest: Boolean
    store_id: Int
    customer_tax_class_id: Int
    items_qty: Float
    coupon_code: String
    grand_total: Float
    base_grand_total: Float
    subtotal: Float
    base_subtotal: Float
    discount_amount: Float
    base_discount_amount: Float
    subtotal_with_discount: Float
    base_subtotal_with_discount: Float
    shipping_amount: Float
    base_shipping_amount: Float
    shipping_discount_amount: Float
    base_shipping_discount_amount: Float
    tax_amount: Float
    base_tax_amount: Float
    weee_tax_applied_amount: Float
    shipping_tax_amount: Float
    base_shipping_tax_amount: Float
    subtotal_incl_tax: Float
    shipping_incl_tax: Float
    shipping_method: String
    base_shipping_incl_tax: Float
    base_currency_code: String
    quote_currency_code: String
    items: [TotalsItem]
    is_in_store_pickup_available: Boolean
    minimum_order_amount: MinimumOrderAmount
}

type TotalsItem {
    item_id: Int
    qty: Float
    price: Float
    base_price: Float
    row_total: Float
    base_row_total: Float
    row_total_with_discount: Float
    tax_amount: Float
    base_tax_amount: Float
    tax_percent: Float
    discount_amount: Float
    base_discount_amount: Float
    discount_percent: Float
    price_incl_tax: Float
    base_price_incl_tax: Float
    row_total_incl_tax: Float
    base_row_total_incl_tax: Float
    weee_tax_applied_amount: Float
    weee_tax_applied: Float
    options: String
    name: String
    sku: String
    customizable_options: [SelectedCustomizableOption]
    bundle_options: [SelectedBundleOption]
    downloadable_links: [SelectedDownloadableLinks]
    product: ProductInterface
}

type SelectedDownloadableLinks {
    label: String
    id: Int
}

type MinimumOrderAmount {
    minimum_order_amount_reached: Boolean
    minimum_order_description: String
}

type ShippingMethod {
    carrier_code: String
    method_code: String
    carrier_title: String
    method_title: String
    error_message: String
    amount: Float
    base_amount: Float
    price_excl_tax: Float
    price_incl_tax: Float
    available: Boolean
}

type OrderList {
    items: [Order]
}

type BaseOrderInfo {
    id: Int
    total_qty_ordered: Int
    increment_id: String
    created_at: String
    status: String
    status_label: String
    grand_total: Float
    sub_total: Float
    currency_code: String
}

type Order {
    base_order_info: BaseOrderInfo
    payment_info: PaymentInfo
    shipping_info: ShippingInfo
    order_products: [ProductInterface] @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\ProductResolver")
}

type PaymentInfo {
    method: String
    cc_owner: String
    cc_last_4: String
    cc_type: String
    additional_information: AdditionalCustomerInfo
}

type AdditionalCustomerInfo {
    bank: String
    method_title: String
    credit_type: String
    month: Int
    customer_info: CreditCustomerInfo
}

type CreditCustomerInfo {
    first_name: String
    last_name: String
    iin_number: String
    middle_name: String
    phone: String
}

type ShippingInfo {
    shipping_method: String
    shipping_address: OrderCustomerAddress
    shipping_description: String
    shipping_amount: Float
    shipping_incl_tax: Float
    tracking_numbers: [String]
}

type OrderCustomerAddress {
    city: String
    company: String
    country_id: String
    customer_id: Int
    firstname: String
    id: Int
    lastname: String
    middlename: String
    prefix: String
    region: String
    street: String
    telephone: String
    district: String
    house_number: String
    apartment_number: String
    postomat_code: String
    store_pickup_code: String
    post_office_code: String
    is_b2b: String
    postcode: String
    organizationname: String
    organizationbin: String
    organizationaddress: String
    organizationiic: String
    organizationbik: String
    vat_id: String
    email: String
}

interface ProductInterface {
    quantity: Float
    row_total: Float
    original_price: Float
    license_key: String
}

type CartDisplayConfig {
    display_tax_in_price: String
    display_tax_in_subtotal: String
    display_tax_in_shipping_amount: String
    include_tax_in_order_total: Boolean
    display_full_tax_summary: Boolean
    display_zero_tax_subtotal: Boolean
}

extend input CartAddressInput {
    vat_id: String
}

type CustomizableFileOption implements CustomizableOptionInterface {
    value: CustomizableFileValue
}

type CustomizableFieldValue {
    file_extension: String @doc(description: "Option file extensions (If type file).")
    price: Float
    price_type: PriceTypeEnum
    sku: String
}

type Stores {
    stores: [Store]
}

type Store {
    city: String
    country: String
    description: String
    name: String
    phone: String
    pickup_location_code: String
    postcode: String
    region: String
    street: String
}

input AddressExtensionAttributes {
    attribute_code: String
    value: String
}

type Cart @doc(description: "Contains the contents and other details about a guest or customer cart.") {
    minimum_order_amount: MinimumOrderAmount @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\CartMinimumOrderAmount") @doc(description: "Indicates whether the cart contains only virtual products.")
    is_in_store_pickup_available: Boolean @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\CartIsInStorePickupAvailable") @doc(description: "Indicates whether the pickup in store is available.")
}

type CartPrices @doc(description: "Contains details about the final price of items in the cart, including discount and tax information.") {
    applied_rule_ids: String @doc(description: "Ids of the rules applied to the cart.")
    coupon_code: String @doc(description: "Coupon code applied to cart.")
    quote_currency_code: String @doc(description: "Base quote currency code.")
}

type CartTaxItem  @doc(description: "Contains tax information about an item in the cart.") {
    percent: Float @doc(description: "The tax percentage applied to the item.")
    amount: Money!
    label: String!
    title: String!
}

interface CartItemInterface @typeResolver(class: "Magento\\QuoteGraphQl\\Model\\Resolver\\CartItemTypeResolver") @doc(description: "An interface for products in a cart.") {
    sku: String
    status: String! @resolver(class: "\\ScandiPWA\\QuoteGraphQl\\Model\\Resolver\\Cart\\CartItemStatus")
}

type SelectedShippingMethod @doc(description: "Contains details about the selected shipping method and carrier.") {
    amount_incl_tax: Money! @doc(description: "The cost of shipping including tax using this shipping method.")
    tax_amount: Float @doc(description: "A shipping tax amount.")
    address: CartAddress @doc(description: "An array of shipping addresses.")
}

type CartAddress implements CartAddressInterface {
    email: String
    vat_id: String
}
